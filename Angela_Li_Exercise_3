### initializing the packages Pyplot, JLD, and Statistics
using PyPlot; using JLD; using Statistics

A.
### loading the image into Julia, displaying it in a figure, and computing its size
elcapitan = imread("el-capitan.png")
imshow(convert(Array{Float32, 3}, elcapitan))
### see elcapitan.png in GitHub
size(elcapitan)
(360, 640, 4)

"""
extract() -- load and show image and extract red, blue, and green channels into 3 separate variables
This function takes the name of an image as a string input and loads and shows the image. The
function extracts the red, blue, and green channels into 3 separate variables and
returns the values of the 3 variables.

Args:
   imagename (string): name of the image

Returns:
   red (matrix of floats): the red channel
   blue (matrix of floats): the blue channel
   green (matrix of floats): the green channel
"""
function extract(imagename)
    imagename = imread(imagename)
    imshow(convert(Array{Float32, 3}, imagename))
    red = imagename[:,:,1]
    green = imagename[:,:,2]
    blue = imagename[:,:,3]
    return red, green, blue
end
extract("el-capitan.png")
(Float32[0.796078 0.796078 … 0.533333 0.52549; 0.803922 0.803922 … 0.541176 0.533333; … ; 0.0980392 0.0100000 … 0.0156863 0.00784314; 0
.0509804 0.0627451 … 0.0196078 0.0313726], Float32[0.54902 0.54902 … 0.568627 0.560784; 0.552941 0.556863 … 0.576471 0.568627; … ; 0.14
902 0.145098 … 0.0156863 0.00784314; 0.113725 0.12549 … 0.0196078 0.0313726], Float32[0.380392 0.380392 … 0.690196 0.682353; 0.388235 0
.388235 … 0.698039 0.690196; … ; 0.109804 0.105882 … 0.0235294 0.0156863; 0.0705882 0.0823529 … 0.027451 0.0392157])

function extract(imagename)
    imagename = imread(imagename)
    imshow(convert(Array{Float32, 3}, imagename))
    red = imagename[:,:,1]
    green = imagename[:,:,2]
    blue = imagename[:,:,3]
    println("BUG BUG BUG")
    return red, green, blue
end
extract("el-capitan.png")
BUG BUG BUG
(Float32[0.796078 0.796078 … 0.533333 0.52549; 0.803922 0.803922 … 0.541176 0.533333; … ; 0.0980392 0.0901961 … 0.0156863 0.00784314; 0
.0509804 0.0100000 … 0.0196078 0.0313726], Float32[0.54902 0.54902 … 0.568627 0.560784; 0.552941 0.556863 … 0.576471 0.568627; … ; 0.14
902 0.145098 … 0.0156863 0.00784314; 0.113725 0.12549 … 0.0196078 0.0313726], Float32[0.380392 0.380392 … 0.690196 0.682353; 0.388235 0
.388235 … 0.698039 0.690196; … ; 0.109804 0.105882 … 0.0235294 0.0156863; 0.0705882 0.0823529 … 0.027451 0.0392157])

function extract(imagename)
    imagename = imread(imagename)
    imshow(convert(Array{Float32, 3}, imagename))
    red = imagename[:,:,1]
    green = imagename[:,:,2]
    blue = imagename[:,:,3]
    println("Reset with git reset -- mixed")
    return red, green, blue
end
extract("el-capitan.png")
Reset with git reset -- mixed
(Float32[0.796078 0.796078 … 0.533333 0.52549; 0.803922 0.803922 … 0.541176 0.533333; … ; 0.0980392 0.0901961 … 0.0156863 0.00784314; 0
.0509804 0.0627451 … 0.0196078 0.0313726], Float32[0.54902 0.54902 … 0.568627 0.560784; 0.552941 0.556863 … 0.576471 0.568627; … ; 0.14
902 0.145098 … 0.0156863 0.00784314; 0.113725 0.12549 … 0.0196078 0.0313726], Float32[0.380392 0.380392 … 0.690196 0.682353; 0.388235 0
.388235 … 0.698039 0.690196; … ; 0.109804 0.105882 … 0.0235294 0.0156863; 0.0705882 0.0823529 … 0.027451 0.0392157])

### making a new 360x640x3 matrix of zeroes
image2 = zeros(360,640,3)
360×640×3 Array{Float64,3}:

### setting dimensions of image2 to the G, B, R channel from el-capitan.png
image2[:,:,1] = elcapitan[:,:,2]
image2[:,:,2] = elcapitan[:,:,3]
image2[:,:,3] = elcapitan[:,:,1]

### plotting the two images side by side
### sizing, naming, and turning off the axis of the image
figure(figsize=[5,5])
subplot(1,2,1); imshow(elcapitan); title("Original"); axis("off")
subplot(1,2,2); imshow(image2); title("Purple"); axis("off")
### see 2 elcapitans.png and titled.png


B.
"""
rotation() -- loads an image and shift the rows of pixels by a certain number (indicated by shiftrows)
This function takes the name of an image as a string input and loads it. The function then
moves rows of pixels up some number of pixels (shiftrows) such that the top
rows now become the bottom rows.

Args:
   name (string): name of the image
   shift (int): number of pixels to shift the image by

Returns:
   shiftedimage (matrix of floats): shifted image
"""
function rotation(name, shiftrows)
    name = imread(name)
    imshow(convert(Array{Float32, 3}, name))
